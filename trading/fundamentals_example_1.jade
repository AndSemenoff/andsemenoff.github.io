extends ../layouts/code_layout.jade

block title
	title= site_title + " Quantopian. Фундаментальные. Пример."

block content
	h2.text-center Фундаментальные финансовые показатели
	article.grid-container
		h4 Простейший пример
		p Кратко опишем алгоритм
			ol
				li Отфильтровываем лучшие 50 компаний по показателю капитализации.
				li Отбираем две отрасли с максимальным средним коэффициентом цена/прибыль (P/E ratio).
				li Каждый месяц закрываем всю нашу позицию перед тем, как открывать новую.
				li Выводим в лог требуемую позицию.

				pre.python: code
					|import pandas as pd
					|import numpy as np
					|&nbsp;
					|def initialize(context):
					|&nbsp;&nbsp;&nbsp;&nbsp;# Словарь акций с их весами
					|&nbsp;&nbsp;&nbsp;&nbsp;context.stock_weights = {}
					|&nbsp;&nbsp;&nbsp;&nbsp;# Счетчик дней до ребалансировки портфеля
					|&nbsp;&nbsp;&nbsp;&nbsp;context.days = 0
					|&nbsp;&nbsp;&nbsp;&nbsp;# Количество секторов с которыми будем работать (покупать)
					|&nbsp;&nbsp;&nbsp;&nbsp;context.sect_numb = 2
					|&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;# Превязка секторов
					|&nbsp;&nbsp;&nbsp;&nbsp;context.sector_mappings = {
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;101.0: "Basic Materials",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;102.0: "Consumer Cyclical",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;103.0: "Financial Services",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;104.0: "Real Estate",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;205.0: "Consumer Defensive",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;206.0: "Healthcare",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;207.0: "Utilites",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;308.0: "Communication Services",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;309.0: "Energy",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;310.0: "Industrials",
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;311.0: "Technology"
					|&nbsp;&nbsp;&nbsp;&nbsp;}
					|&nbsp;    
					|&nbsp;&nbsp;&nbsp;&nbsp;# Ребалансировка портфеля ежемесячно в первый день в момент открытия торгов
					|&nbsp;&nbsp;&nbsp;&nbsp;schedule_function(rebalance,
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date_rule=date_rules.month_start(),
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;time_rule=time_rules.market_open())

				div Теперь рассмотрим основной метод, который вызывается каждый раз перед началом торгового дня. В нашем случае это
				| означает, что он запускается ежемесячно в первый день месяца. Метод обновляет множество акций и соотвествующие фундаментальные
				| экономические показатели.
				pre.python: code
					|def before_trading_start(context, data): 
					|&nbsp;&nbsp;&nbsp;&nbsp;# Количество анализируемых акций    
					|&nbsp;&nbsp;&nbsp;&nbsp;num_stocks = 50
					|&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;# Формируем запрос SQLAlchemy на основе pe_ratio
					|&nbsp;&nbsp;&nbsp;&nbsp;# и принадлежности к секторам
					|&nbsp;&nbsp;&nbsp;&nbsp;# Мы отфильтровываем результат, чтобы обязательно были значения
					|&nbsp;&nbsp;&nbsp;&nbsp;# по капитализации и количеству акции.
					|&nbsp;&nbsp;&nbsp;&nbsp;# Мы ограничиваем вывод количеством num_stocks и возвращаем данные
					|&nbsp;&nbsp;&nbsp;&nbsp;# в порядке убывания
					|&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;fundamental_df = get_fundamentals(
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;query(
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fundamentals.valuation_ratios.pe_ratio,
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fundamentals.asset_classification.morningstar_sector_code
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.filter(fundamentals.valuation.market_cap != None)
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.filter(fundamentals.valuation.shares_outstanding != None)
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.order_by(fundamentals.valuation.market_cap.desc())
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.limit(num_stocks)
					|&nbsp;&nbsp;&nbsp;&nbsp;)
					|&nbsp;&nbsp;&nbsp;&nbsp;# Находим сектора с наибольшим средним коэффициентом цена/прибыль (pe_ratio)
					|&nbsp;&nbsp;&nbsp;&nbsp;sector_pe_dict = {}
					|&nbsp;&nbsp;&nbsp;&nbsp;for stock in fundamental_df:
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sector = fundamental_df[stock]['morningstar_sector_code']
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pe = fundamental_df[stock]['pe_ratio']
					|&nbsp;&nbsp;&nbsp;&nbsp;    
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# If it exists add our pe to the existing list. 
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Otherwise don't add it.
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if sector in sector_pe_dict:
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sector_pe_dict[sector].append(pe)
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else:
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sector_pe_dict[sector] = []
					|&nbsp;&nbsp;&nbsp;&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;# Находим среднее PE для кажного сектора
					|&nbsp;&nbsp;&nbsp;&nbsp;sector_pe_dict = dict([(sectors, np.average(sector_pe_dict[sectors])) 
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for sectors in sector_pe_dict if len(sector_pe_dict[sectors]) > 0])
					|&nbsp;&nbsp;&nbsp;&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;# Сортируем в низходящем порядке и берем первых sect_numb
					|&nbsp;&nbsp;&nbsp;&nbsp;sectors = sorted(sector_pe_dict, key=lambda x: sector_pe_dict[x], reverse=True)[:context.sect_numb]
					|&nbsp;&nbsp;&nbsp;&nbsp;
					|&nbsp;&nbsp;&nbsp;&nbsp;# Отфильтровываем акции только выбранных секторов
					|&nbsp;&nbsp;&nbsp;&nbsp;context.stocks = [stock for stock in fundamental_df
					|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if fundamental_df[stock]['morningstar_sector_code'] in sectors]
					|&nbsp;&nbsp;&nbsp;&nbsp;# Инициализируем
					|&nbsp;&nbsp;&nbsp;&nbsp;# Initialize a context.sectors variable
					|&nbsp;&nbsp;&nbsp;&nbsp;context.sectors = [context.sector_mappings[sect] for sect in sectors]
					|&nbsp;&nbsp;&nbsp;&nbsp;# Обновляем
					|&nbsp;&nbsp;&nbsp;&nbsp;# Update context.fundamental_df with the securities (and pe_ratio) that we need
					|&nbsp;&nbsp;&nbsp;&nbsp;context.fundamental_df = fundamental_df[context.stocks]
					|&nbsp;&nbsp;&nbsp;&nbsp;    
					|&nbsp;&nbsp;&nbsp;&nbsp;update_universe(context.fundamental_df.columns.values)				