extends ../layouts/code_layout.jade

block title
	title= site_title + " Стратегия 'Купи и держи'."

block content
	div.row: div.large-12.columns: h2 Стратегия "Купи и держи".
	div.row: div.large-12.columns
		h4 Инициализация алгоритмов
		div В самом начале вашего алгоритма мы вызываем метод <kbd>Initialize()</kbd> для настройки вашей стратегии. Здесь важно настроить состояние вашего алгоритма, чтобы его можно было легко перезапустить.

		h4 Инициализация денежных средств
		div Метод <kbd>self.SetCash()</kbd> устанавливает стартовый капитал для вашей стратегии. При тестировании на истории мы используем значение, которое вы установили для инициализации вашего капитала; в реальной торговле мы получаем это значение с вашего брокерского счета. По умолчанию мы используем начальный капитал в размере 100 000 долларов США при тестировании на истории и торговле на бумаге.
		pre
			code.python3
				|class BuyAndHold(QCAlgorithm):
				|
				|	def Initialize(self):
				|		# 1. Устанавливаем первоначальную сумму наличных
				|		self.SetCash(100000)
				|		
				|	def OnData(self, data):
				|		pass
				
		h4 Инициализация периода анализа
		div Диапазон дат для вашего бэктеста определяется в вашем методе <kbd>Initialize</kbd>. Вы можете установить это с помощью фиксированных дат или объекта datetime. Эти методы называются <kbd>self.SetStartDate()</kbd> и <kbd>self.SetEndDate()</kbd>.
		pre
			code.python3
				|class BuyAndHold(QCAlgorithm):
				|	def Initialize(self):
				|		# 1. Устанавливаем первоначальную сумму наличных
				|		self.SetCash(100000)
				|		# Устанавливаем период, посредством задания первого и последнего дня
				|		self.SetStartDate(2017, 1, 1)
				|		self.SetEndDate(2017, 10, 31)
				|	def OnData(self, data):
				|		pass
		h4 Инициализация источников данных
		div Есть много способов запросить данные в QuantConnect. Для начала мы продемонстрируем, как запрашивать данные вручную.

		h4 Добавление данных
		div Метод <b>self.AddEquity()</b> используется для ручного запроса активов. Он принимает строковый тикер с текущим именем актива и разрешением. Для получения дополнительной информации см. 
			a(href="https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data") 
				| документацию.

		div <b>AddEquity</b> (и все остальные методы AddAsset) возвращают объект актива. Это дает вам ссылку на объект актива, который вы можете использовать позже.
		div Вы можете управлять разрешением данных с помощью перечисления <b>Resolution</b>. Он имеет значения <b>Tick, Second, Minute, Hour и Daily</b>. например <b>Resolution.Minute</b>. Не все данные доступны во всех разрешениях. Вы должны проверить 
			a(href="https://www.quantconnect.com/data/tree") 
				| библиотеку данных
			| , чтобы убедиться, что ваше разрешение доступно.
		div Вы можете изменить кредитное плечо, запросить данные пре-маркета и отключить форвардное заполнение. Вы можете увидеть вызовы API в 
			a(href="https://www.quantconnect.com/docs/algorithm-reference/initializing-algorithms#Initializing-Algorithms-Selecting-Asset-Data") 
				| документации. 
			| Мы обсудим это далее.
		pre
			code.python3
				|class BuyAndHold(QCAlgorithm):
				|	def Initialize(self):
				|		# 1. Устанавливаем первоначальную сумму наличных
				|		self.SetCash(100000)
				|		# Устанавливаем период, посредством задания первого и последнего дня
				|		self.SetStartDate(2017, 1, 1)
				|		self.SetEndDate(2017, 10, 31)
				|		
				|		# Вручную запрашиваем данные
				|		self.spy = self.AddEquity("SPY", Resolution.Minute)
				|		self.iwm = self.AddEquity("IWM", Resolution.Minute)
				|		
				|	def OnData(self, data):
				|		pass
				
		h4 Нормализация данных
		div В QuantConnect исторические данные настраиваются по умолчанию. Это означает, что исторические значения изменены для учета дробления акций и выплаты дивидендов. Исторические цены могут выглядеть немного странно, если вы не понимаете, почему это было сделано: например. вместо 10,23 доллара цена может составлять 1,21216 доллара.

		div Вы можете управлять режимом нормализации данных для каждого актива отдельно. Это делается с помощью метода <b>security.SetDataNormalizationMode()</b>. Допустимые значения: <b>Raw, Adjusted, SplitAdjusted и TotalReturn</b>.
		pre
			code.python3
				|ibm = self.AddEquity("IBM", Resolution.Minute)
				|ibm.SetDataNormalizationMode(DataNormalizationMode.Adjusted) //По умолчанию
		h4 Доступ к ценным бумагам
		div Доступ к ценным бумагам в вашем алгоритме можно получить через словарь <b>self.Securities[symbol]</b>. Он ищет ценную бумагу по объекту символа или строке тикера. Используя этот метод доступа, вы можете найти ценную бумагу и изменить ее модели или режим нормализации данных.
		pre
			code.python3
				|self.Securities["IBM"].SetDataNormalizationMode(DataNormalizationMode.Adjusted)

		h4 Свойства глобального портфеля
		div Словарь алгоритма <b>Portfolio</b> также имеет вспомогательные свойства для быстрого поиска таких вещей, как: <b>Invested, TotalUnrealizedProfit, TotalPortfolioValue, TotalMarginUsed</b>. Вы можете увидеть больше свойств в 
			a(href="https://www.quantconnect.com/docs/algorithm-reference/securities-and-portfolio") 
				| документации, 
			| например:
		pre
			code.python3
				|if self.Portfolio["IBM"].Invested:
				|	self.Debug("Total unrealized profit: " + str(Portfolio.TotalUnrealizedProfit))
		h4 Конкретные элементы портфеля
		div Индивидуальные активы хранятся в собственности вашего портфеля. Доступ к этому можно получить через словарь <b>self.Portfolio[symbol]</b>. Записи в словаре портфеля — это объекты <b>SecurityHolding</b> со многими свойствами ваших активов, такими как: <b> Invested, Quantity, AveragePrice and UnrealizedProfit</b> например:
		pre
			code.python3
				|if self.Portfolio["IBM"].Invested:
				|	self.Debug("We have IBM shares!")
				
		div Еще пример:
		pre
			code.python3
				|class BuyAndHold(QCAlgorithm):
				|	def Initialize(self):
				|		self.SetStartDate(2017, 6, 1)
				|		self.SetEndDate(2017, 6, 2)
				|		#1. Update the AddEquity command to request IBM data
				|		self.spy = self.AddEquity("IBM", Resolution.Daily)
				|		
				|	def OnData(self, data):
				|		
				|		#2. Display the Quantity of IBM Shares You Own
				|		if self.Portfolio["IBM"].Invested:
				|			self.Debug("Number of IBM Shares: " + str(self.Portfolio["IBM"].Quantity ))
				
		h4 Отправка ордеров
		div Давайте совершим нашу первую сделку! Есть много способов отправлять приказы через LEAN, но мы собираемся начать с <b>MarketOrder</b>. Его можно использовать следующим образом:
		pre
			code.python3
				|self.MarketOrder("AAPL", 200)
		div Рыночные ордера исполняются сразу после открытия рынка. Если вы используете ежедневные данные, заказ не будет обработан до следующего утра. Дневные бары поступают в ваш алгоритм только после закрытия рынка.
		h4 Цены исполнения
		div Средняя цена исполнения вашего актива доступна в классе <b>Portfolio</b>. Вы можете получить к нему доступ следующим образом: <b>Portfolio["IBM"].AveragePrice</b>. При тестировании на истории это смоделированная цена. В реальной торговле это берется из вашего брокерского отчета о цене исполнения.
		pre
			code.python3
				|class BuyAndHold(QCAlgorithm):
				|
				|	def Initialize(self):
				|		self.SetStartDate(2017, 6, 1)
				|		self.SetEndDate(2017, 6, 15)
				|		#1,2. Select IWM minute resolution data and set it to Raw normalization mode
				|		self.iwm = self.AddEquity('IWM', Resolution.Minute)
				|		self.iwm.SetDataNormalizationMode(DataNormalizationMode.Raw)
				|
				|	def OnData(self, data):
				|
				|		#3. Place an order for 100 shares of IWM and print the average fill price
				|		#4. Debug the AveragePrice of IWM
				|		if not self.Portfolio.Invested:
				|			self.MarketOrder('IWM', 1000)
				|			self.Debug('AveragePrice:' + str(self.Portfolio['IWM'].AveragePrice))